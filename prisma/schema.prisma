generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

enum Role {
  ADMIN
  SELLER
  BUYER
  VIEWER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Role      @default(BUYER)
  accounts      Account[]
  sessions      Session[]
  // products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Product {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       Int
  images      ImageProduct[]
  description String?
  stock       Int?
  categories  Category[]
  comments    Comment[]
  // user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ImageProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  image     String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("image_products")
}

model Category {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("categories")
}

model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  username  String?
  email     String?
  image     String?
  role      String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Banner {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  title_button     String
  href_button      String
  image            String
  alt_image        String
  background_color String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banners")
}
